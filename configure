#!/usr/bin/env bash

source $(dirname "${BASH_SOURCE[0]}")/tools/jwbuild/jwbuild.sh

save_vars CXX AR CXXFLAGS

# Parse options

option_default help no
option_default debug yes
option_default fmt-header-only no

if test_option help; then
	cat <<- EOF
	Recognized options:
	  --host=<...>           toolchain program prefix, eg. "i386-pc-msdosdjgpp"
	  --jwdpmi-config=<...>  location of configuration header
	  --with-jwutil=<...>    location of libjwutil "build" dir (where you
	                           invoked 'configure')
	  --fmt-header-only      use libfmt in header-only mode
	  --debug=no             disable debug mode

	Important variables:
	  CXXFLAGS               compiler flags
	  CXX                    compiler command      (if --host not specified)
	  AR                     'ar' archiver command (if --host not specified)
	EOF
	exit 1
fi

# Check debug flag

if test_option debug; then
	debug_flag='-D_DEBUG'
else
	debug_flag='-DNDEBUG'
fi
CXXFLAGS+=" $debug_flag"

# Set CXX/AR

host=${options[host]}
if [[ ! -z "$host" ]]; then
	CXX="$host-g++"
	AR="$host-ar"
fi
CXX=${CXX:-g++}
AR=${AR:-ar}

check_programs $CXX $AR
check_compiler -std=gnu++20 -masm=intel

# Set CXXFLAGS

unset more_cxxflags
more_cxxflags+=" -I$src/include"
more_cxxflags+=" -iquote $(pwd)/include"
more_cxxflags+=" -masm=intel"
more_cxxflags+=" $debug_flag"
more_cxxflags+=" $($src/tools/missing-macros.sh $CXX $CXXFLAGS $more_cxxflags)"
more_cxxflags+=" -I$src/lib/fmt/include"
if test_option fmt-header-only; then
	more_cxxflags+=" -DFMT_HEADER_ONLY=1"
fi
prepend CXXFLAGS "$more_cxxflags"

check_compiler

# Find jwutil

CXXFLAGS+=" $(read_flags "${options[with-jwutil]}/cxxflags")"
cat <<- EOF | compile || fail "jwutil not found"
	#include <jw/common.h>
EOF

# Find config header

config_file="${options[jwdpmi-config]}"
if [[ -z "$config_file" ]]; then
	warn "no configuration header specified, using default."
	config_file="$src/jwdpmi_config.h"
fi
config_file="$(winpath "$(realpath "$config_file")")"
cat <<- EOF | compile || fail "configuration header not found"
	#include "$config_file"
EOF

# Generate config.status

save_config

# Create directories

mkdir -p src/
mkdir -p include/
mkdir -p lib/fmt/

if not test_option fmt-header-only; then
	cd lib/fmt/

	# Generate CMake toolchain file

	cat <<- EOF > toolchain.CMake
		set(CMAKE_SYSTEM_NAME Generic)
		set(CMAKE_SYSTEM_PROCESSOR i386)

		set(CMAKE_CXX_COMPILER $CXX)

		set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
		set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
		set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
		set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
	EOF

	# Configure fmt

	case $(uname) in
	MSYS*|MINGW*) cmake_generator='MSYS Makefiles' ;;
	*)            cmake_generator='Unix Makefiles' ;;
	esac

	CXXFLAGS="$CXXFLAGS -Wno-attributes"                                  \
		cmake   -G "$cmake_generator"                                 \
			-DCMAKE_BUILD_TYPE=Release                            \
			-DCMAKE_CXX_STANDARD=20                               \
			--toolchain=toolchain.CMake                           \
			--no-warn-unused-cli                                  \
			-DFMT_TEST=0                                          \
			$src/lib/fmt

	cd ../..
fi

# Generate config file wrapper

cat <<- EOF > include/jwdpmi_config.h
#pragma once
#include "$config_file"
EOF

# Generate cxxflags

write_cxxflags
echo $more_cxxflags >> cxxflags

# Generate ldflags

cat <<- EOF >> ldflags
-Wno-attributes
-Wl,--script=$src/tools/i386go32.x
-Wl,--wrap=main
-Wl,--wrap=malloc
-Wl,--wrap=calloc
-Wl,--wrap=realloc
-Wl,--wrap=memalign
-Wl,--wrap=free
-Wl,--wrap=__cxa_allocate_exception
-Wl,--wrap=__cxa_free_exception
-Wl,--wrap=__cxa_allocate_dependent_exception
-Wl,--wrap=__cxa_free_dependent_exception
-Wl,--wrap=__dpmi_yield
-L$(pwd) -ljwdpmi
EOF
if not test_option fmt-header-only; then
	echo -L$(pwd)/lib/fmt -lfmt >> ldflags
fi
write_ldflags

# Generate dependency lists

write_cxxdeps

cat <<- EOF >> lddeps
	libjwdpmi.a
	$src/tools/i386go32.x
EOF
if not test_option fmt-header-only; then
	echo lib/fmt/libfmt.a >> lddeps
fi
write_lddeps

write_targets
cat <<- EOF >> targets
	jwdpmi
	preprocessed
	asm
EOF
if not test_option fmt-header-only; then
	echo fmt >> targets
fi

# Generate Makefile

write_makefile

if not test_option fmt-header-only; then
	cat <<- EOF >> Makefile
	.PHONY: fmt
	all:: fmt
	fmt: lib/fmt/libfmt.a
	lib/fmt/libfmt.a: FORCE ; \$(MAKE) -C lib/fmt/ fmt
	clean:: ; \$(MAKE) -C lib/fmt/ clean
	distclean:: clean ; rm -rf lib/fmt/*
	EOF
fi
